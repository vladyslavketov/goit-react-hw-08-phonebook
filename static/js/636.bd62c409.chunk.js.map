{"version":3,"file":"static/js/636.bd62c409.chunk.js","mappings":"qOACA,EAAuB,0B,SCGR,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAsBlC,OACE,+BACE,kBAAMC,UAAWC,EAAUC,SAtB/B,SAAsBC,GACpBA,EAAEC,iBAEF,MAAyBD,EAAEE,cAAcC,SAAjCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAId,GAHAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAERZ,EAASe,MAAK,SAAAC,GAAO,OAAIA,EAAQL,OAASA,EAAKM,KAA1B,IACvB,OAAOC,MAAM,GAAD,OAAIP,EAAJ,6BAGd,IAAMQ,EAAa,CACjBR,KAAMA,EAAKM,MACXL,OAAQA,EAAOK,OAGjBnB,GAASsB,EAAAA,EAAAA,IAAWD,IACpBZ,EAAEE,cAAcY,OACjB,EAIG,WACE,qCAEE,kBACEC,KAAK,OACLX,KAAK,OACLY,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,uCAEE,kBACEH,KAAK,MACLX,KAAK,SACLc,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,6BAIP,C,cCpDD,EAAyB,uBCkBzB,EAfe,WACb,IAAMxB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,mBAAOK,UAAWC,EAAlB,WACE,qDACA,kBAAOiB,KAAK,OAAOI,SAPvB,SAAmBnB,GACjBT,GAAS6B,EAAAA,EAAAA,IAAiBpB,EAAEE,cAAcQ,OAC3C,MAQF,E,UChBD,EAA+B,mCC+B/B,EAzBqB,SAAC,GAAuC,IAAD,IAApCD,QAAWY,EAAyB,EAAzBA,GAAIjB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,OACrCd,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gBAAaK,UAAWC,EAAxB,WACE,0BAAOM,KACP,0BAAOC,KAIP,SAACiB,EAAA,EAAD,CAAQL,MAAO,SAAUM,QAAS,kBAAMhC,GAASiC,EAAAA,EAAAA,IAAcH,GAA7B,MAN3BA,EASZ,ECnBD,EAA+B,mCC6B/B,EAzBqB,WACnB,IAAM5B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAC5B6B,GAAS/B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAM8B,MAAV,IAE1BC,EAEN,WACE,IAAMC,EAAkBF,EAAOG,cAE/B,OAAOnC,EAASgC,QAAO,SAAAhB,GAAO,OAC5BA,EAAQL,KAAKwB,cAAcC,SAASF,EADR,GAG/B,CARuBG,GAUxB,OACE,+BACE,eAAIjC,UAAWC,EAAf,SACG4B,EAAgBK,KAAI,gBAAGV,EAAH,EAAGA,GAAIjB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACnB,SAAC,EAAD,CAAuBI,QAAS,CAAEY,GAAAA,EAAIjB,KAAAA,EAAMC,OAAAA,IAAzBgB,EADA,OAM5B,ECMD,EAzBqB,WACnB,IAAM9B,GAAWC,EAAAA,EAAAA,MAEXwC,GADWtC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IACVqC,OAAS,EAMjC,OAJAC,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACV,GAAE,CAAC5C,KAGF,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAACD,EAAD,IACC0C,IACC,iCACE,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,WAMX,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsItem/ContactsItem.module.css?8722","components/ContactsItem/ContactsItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport css from '../ContactForm/ContactForm.module.css'\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const { name, number } = e.currentTarget.elements;\n    console.log(name);\n    console.log(number);\n    \n    if (contacts.find(contact => contact.name === name.value)) {\n      return alert(`${name} is already in contacts.`);\n    };\n\n    const newContact = {\n      name: name.value,\n      number: number.value,\n    };\n\n    dispatch(addContact(newContact));\n    e.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n  )\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { useDispatch } from 'react-redux';\nimport { filteredContacts } from '../../redux/contacts/filterSlice';\nimport css from '../Filter/Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  function onChange (e) {\n    dispatch(filteredContacts(e.currentTarget.value));\n  }; \n\n  return (\n    <label className={css.filter}>\n      <span>Find contacts by name</span>\n      <input type=\"text\" onChange={onChange} />\n    </label>\n  );\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"ContactsItem_contactsItem__MmqyM\"};","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { Button } from \"components/Button/Button\";\n\nimport PropTypes from 'prop-types';\nimport css from '../ContactsItem/ContactsItem.module.css'\n\nconst ContactsItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li key={id} className={css.contactsItem}>\n      <span>{name}</span>\n      <span>{number}</span>\n      {/* <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </button> */}\n      <Button title={\"Delete\"} onClick={() => dispatch(deleteContact(id))} />\n    </li>\n  );\n};\n\nContactsItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactsItem;","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\"};","import { useSelector } from 'react-redux';\n\nimport ContactsItem from '../ContactsItem/ContactsItem';\nimport css from '../ContactsList/ContactsList.module.css';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  const filtredContacts = getFiltredContacts();\n\n  function getFiltredContacts() {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  return (\n    <>\n      <ul className={css.contactsList}>\n        {filtredContacts.map(({ id, name, number }) => (\n          <ContactsItem key={id} contact={{ id, name, number }} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactsList;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Section, Container } from 'components/App/App.styled'; \nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { getContacts } from 'redux/contacts/contactsOperations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const isShow = contacts.length > 0;\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      <Container>\n        <ContactForm />\n        {isShow && (\n          <>\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactsList />\n          </>\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default ContactsPage;\n\n// <h1>Phonebook</h1>\n// <ContactForm/>\n// {isShow && <><h2>Contacts</h2><Filter /><ContactsList /></>}\n\n// export const ContactsPage = () => {\n//   return <h1>ContactsPage</h1>;\n// };\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","className","css","onSubmit","e","preventDefault","currentTarget","elements","name","number","console","log","find","contact","value","alert","newContact","addContact","reset","type","pattern","title","required","onChange","filteredContacts","id","Button","onClick","deleteContact","filter","filtredContacts","normalizeFilter","toLowerCase","includes","getFiltredContacts","map","isShow","length","useEffect","getContacts"],"sourceRoot":""}