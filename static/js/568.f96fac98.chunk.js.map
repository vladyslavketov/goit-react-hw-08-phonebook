{"version":3,"file":"static/js/568.f96fac98.chunk.js","mappings":"yPAKe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAoBlC,OACE,+BACE,UAAC,KAAD,CAAYC,SApBhB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAyBD,EAAEE,cAAcC,SAAjCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEd,GAAIV,EAASW,MAAK,SAAAC,GAAO,OAAIA,EAAQH,OAASA,EAAKI,KAA1B,IACvB,OAAOC,MAAM,GAAD,OAAIL,EAAJ,6BAGd,IAAMM,EAAa,CACjBN,KAAMA,EAAKI,MACXH,OAAQA,EAAOG,OAGjBf,GAASkB,EAAAA,EAAAA,IAAWD,IACpBV,EAAEE,cAAcU,OACjB,EAIG,WACE,UAAC,KAAD,mBAEE,SAAC,KAAD,CACEC,KAAK,OACLT,KAAK,OACLU,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAC,KAAD,qBAEE,SAAC,KAAD,CAAaH,KAAK,MAAMT,KAAK,SAASY,UAAQ,QAEhD,SAACC,EAAA,EAAD,CAAQJ,KAAM,SAAUE,MAAO,oBAItC,C,kBC3BD,EAjBe,WACb,IAAMtB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,+BACE,UAAC,KAAD,YACE,qDACA,SAAC,KAAD,CAAamB,KAAK,OAAOK,SAR/B,SAAmBlB,GACjBP,GAAS0B,EAAAA,EAAAA,IAAiBnB,EAAEE,cAAcM,OAC3C,QAUF,E,iBCjBYY,EAAOC,EAAAA,GAAAA,GAAH,uOC+BjB,EA1BqB,SAAC,GAAuC,IAAD,IAApCd,QAAWe,EAAyB,EAAzBA,GAAIlB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,OACrCZ,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAAC0B,EAAD,YACE,0BAAOhB,KACP,0BAAOC,KACP,SAACY,EAAA,EAAD,CACEJ,KAAM,SACNE,MAAO,SACPQ,QAAS,kBAAM9B,GAAS+B,EAAAA,EAAAA,IAAcF,GAA7B,MANFA,EAUd,ECnBYG,EAAOJ,EAAAA,GAAAA,GAAH,qNC4BjB,EAzBqB,WACnB,IAAM1B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAC5B4B,GAAS9B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAM6B,MAAV,IAE1BC,EAEN,WACE,IAAMC,EAAkBF,EAAOG,cAE/B,OAAOlC,EAAS+B,QAAO,SAAAnB,GAAO,OAC5BA,EAAQH,KAAKyB,cAAcC,SAASF,EADR,GAG/B,CARuBG,GAUxB,OACE,+BACE,SAACN,EAAD,UACGE,EAAgBK,KAAI,gBAAGV,EAAH,EAAGA,GAAIlB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACnB,SAAC,EAAD,CAAuBE,QAAS,CAAEe,GAAAA,EAAIlB,KAAAA,EAAMC,OAAAA,IAAzBiB,EADA,OAM5B,ECMD,EAzBqB,WACnB,IAAM7B,GAAWC,EAAAA,EAAAA,MAEXuC,GADWrC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IACVoC,OAAS,EAMjC,OAJAC,EAAAA,EAAAA,YAAU,WACR1C,GAAS2C,EAAAA,EAAAA,MACV,GAAE,CAAC3C,KAGF,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAACD,EAAD,IACCyC,IACC,UAAC,KAAD,YACE,2CACA,SAAC,EAAD,KACA,SAAC,EAAD,WAMX,C","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactsItem/ContactsItem.styled.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { StyledForm, StyledInput, StyledLabel } from 'components/App/App.styled';\nimport { Button } from 'components/Button/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const { name, number } = e.currentTarget.elements;\n    \n    if (contacts.find(contact => contact.name === name.value)) {\n      return alert(`${name} is already in contacts.`);\n    };\n\n    const newContact = {\n      name: name.value,\n      number: number.value,\n    };\n\n    dispatch(addContact(newContact));\n    e.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit}>\n        <StyledLabel>\n          Name\n          <StyledInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </StyledLabel>\n        <StyledLabel>\n          Number\n          <StyledInput type=\"tel\" name=\"number\" required />\n        </StyledLabel>\n        <Button type={'submit'} title={'Add contact'} />\n      </StyledForm>\n    </>\n  );\n};","import { StyledInput, StyledLabel } from 'components/App/App.styled';\nimport { useDispatch } from 'react-redux';\nimport { filteredContacts } from '../../redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  function onChange (e) {\n    dispatch(filteredContacts(e.currentTarget.value));\n  }; \n\n  return (\n    <>\n      <StyledLabel>\n        <span>Find contacts by name</span>\n        <StyledInput type=\"text\" onChange={onChange} />\n      </StyledLabel>\n    </>\n  );\n};\n\nexport default Filter;","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 32px;\n  padding: 0 0 0 8px;\n\n  background-color: rgba(135, 207, 235, 0.2);\n  border-radius: 8px;\n\n  & span:nth-child(2) {\n    margin-left: auto;\n  }\n`;","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { Button } from \"components/Button/Button\";\n\nimport PropTypes from 'prop-types';\nimport { Item } from \"./ContactsItem.styled\";\n\nconst ContactsItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Item key={id}>\n      <span>{name}</span>\n      <span>{number}</span>\n      <Button\n        type={'button'}\n        title={'Delete'}\n        onClick={() => dispatch(deleteContact(id))}\n      />\n    </Item>\n  );\n};\n\nContactsItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactsItem;","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 0 auto;\n  padding: 20px;\n  max-width: 360px;\n\n  background-color: rgba(135, 207, 235, 0.1);\n  border-radius: 8px;\n`;","import { useSelector } from 'react-redux';\n\nimport ContactsItem from '../ContactsItem/ContactsItem';\nimport { List } from './ContactsList.styled';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  const filtredContacts = getFiltredContacts();\n\n  function getFiltredContacts() {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  return (\n    <>\n      <List >\n        {filtredContacts.map(({ id, name, number }) => (\n          <ContactsItem key={id} contact={{ id, name, number }} />\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default ContactsList;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Section, Container, Box } from 'components/App/App.styled'; \nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { getContacts } from 'redux/contacts/contactsOperations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const isShow = contacts.length > 0;\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      <Container>\n        <ContactForm />\n        {isShow && (\n          <Box>\n            <h2>Your contacts</h2>\n            <Filter />\n            <ContactsList />\n          </Box>\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","onSubmit","e","preventDefault","currentTarget","elements","name","number","find","contact","value","alert","newContact","addContact","reset","type","pattern","title","required","Button","onChange","filteredContacts","Item","styled","id","onClick","deleteContact","List","filter","filtredContacts","normalizeFilter","toLowerCase","includes","getFiltredContacts","map","isShow","length","useEffect","getContacts"],"sourceRoot":""}